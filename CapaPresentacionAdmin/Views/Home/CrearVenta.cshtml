
@{
    ViewBag.Title = "Crear Venta";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="modal-body mt-3">
    <h5>Crear Venta Externa</h5>

    <!-- Seleccionar Cliente -->
    <div class="mb-3">
        <label for="selectCliente" class="form-label">Seleccionar Cliente</label>
        <select id="selectCliente" class="form-select">
            <option value="">Seleccione un Cliente</option>
        </select>
    </div>

    <!-- Seleccionar Localidad -->
    <div class="mb-3">
        <label for="selectLocalidad" class="form-label">Seleccionar Localidad</label>
        <select id="selectLocalidad" class="form-select">
            <option value="">Seleccione una Localidad</option>
        </select>
    </div>

    <!-- Seleccionar Producto -->
    <div class="mb-3">
        <label for="selectProducto" class="form-label">Seleccionar Producto</label>
        <select id="selectProducto" class="form-select">
            <option value="">Seleccione un Producto</option>
        </select>
    </div>
    <div class="mb-3">
        <label for="txtObservacion" class="form-label">Comentarios</label>
        <input type="text" class="form-control" id="txtObservacion" placeholder="Agregar comentarios del Producto" autocomplete="off">
    </div>

    <!-- Cantidad de Productos -->
    <div class="mb-3">
        <label for="txtCantidad" class="form-label">Cantidad</label>
        <input type="number" class="form-control" id="txtCantidad" min="1" value="1">
    </div>

    <!-- Botón para agregar producto -->
    <div class="mb-3">
        <button type="button" class="btn btn-secondary" onclick="agregarProductoSeleccionado()">Agregar Producto</button>
    </div>

    <!-- Total Pago -->
    <div class="mb-3">
        <label for="visibleTotalPago" class="form-label">Total Pago</label>
        <input type="text" id="visibleTotalPago" placeholder="Se mostrara el total del pago" class="form-control" readonly />
        <input type="hidden" id="hiddenTotalPago" name="hiddenTotalPago" />
    </div>
    <!-- Listado de Productos Seleccionados -->
    <div class="mb-3">
        <h6>Productos Seleccionados:</h6>
        <ul id="listaProductosSeleccionados"></ul>
    </div>

    <div>
        <!-- Botón para limpiar productos seleccionados -->
        <div class="mb-3">
            <button type="button" class="btn btn-danger" onclick="limpiarProductos()">Limpiar Productos Seleccionados</button>
        </div>
        <!-- Botón para crear venta -->
        <div class="text-end">
            <button type="button" class="btn btn-primary" onclick="crearVenta()">Guardar Venta</button>
        </div>
    </div>
</div>

@section scripts {
    <script>
        var productosSeleccionados = []; // Array para almacenar productos seleccionados

        $(document).ready(function () {
            cargarProductos();
            cargarLocalidades();
            cargarClientes();
        });

        // Cargar clientes desde el backend
        function cargarClientes() {
            $.ajax({
                url: '@Url.Action("ListarClientes", "Home")',
                type: "GET",
                dataType: "json",
                success: function (response) {
                    $("#selectCliente").empty();
                    $("#selectCliente").append('<option value="">Seleccione un Cliente</option>');
                    $.each(response.data, function (index, item) {
                        $("<option>").attr({ "value": item.Id_Cliente }).text(item.Nombre).appendTo("#selectCliente");
                    });
                },
                error: function (error) {
                    console.log("Error al cargar clientes:", error);
                }
            });
        }

        // Cargar localidades desde el backend
        function cargarLocalidades() {
            $.ajax({
                url: '@Url.Action("ListarLocalidad", "Home")',
                type: "GET",
                dataType: "json",
                success: function (response) {
                    $("#selectLocalidad").empty();
                    $("#selectLocalidad").append('<option value="">Seleccione una Localidad</option>');
                    $.each(response.data, function (index, item) {
                        $("<option>").attr({ "value": item.Id_Localidad }).text(item.Barrio).appendTo("#selectLocalidad");
                    });
                },
                error: function (error) {
                    console.log("Error al cargar localidades:", error);
                }
            });
        }

        // Cargar productos desde el backend
        function cargarProductos() {
            $.ajax({
                url: '@Url.Action("ListarProducto", "Mantenedor")',
                type: "GET",
                dataType: "json",
                success: function (data) {
                    $.each(data.data, function (index, item) {
                        $("<option>")
                            .attr({ "value": item.Id_Producto, "data-precio": item.Precio })
                            .text(item.Nombre)
                            .appendTo("#selectProducto");
                    });
                },
                error: function (error) {
                    console.log("Error al cargar productos:", error);
                }
            });
        }

        // Agregar producto seleccionado a la lista
        function agregarProductoSeleccionado() {
            var productoId = $("#selectProducto").val();
            var productoNombre = $("#selectProducto option:selected").text();
            var precioProducto = parseFloat($("#selectProducto option:selected").data('precio')) || 0;
            var cantidad = parseInt($("#txtCantidad").val()) || 1;
            var comentario = $("#txtObservacion").val(); // Obtener el comentario

            if (!productoId || cantidad <= 0) {
                alert("Seleccione un producto válido y una cantidad mayor a 0.");
                return;
            }

            // Verificar si el producto ya fue seleccionado
            var productoExistente = productosSeleccionados.find(p => p.Id_Producto === parseInt(productoId));
            if (productoExistente) {
                productoExistente.Cantidad += cantidad; // Actualizar la cantidad
                productoExistente.Subtotal += precioProducto * cantidad; // Actualizar el subtotal
            } else {
                // Agregar nuevo producto
                productosSeleccionados.push({
                    Id_Producto: parseInt(productoId),
                    Nombre: productoNombre,
                    Precio: precioProducto,
                    Cantidad: cantidad,
                    Subtotal: precioProducto * cantidad,
                    Comentario: comentario // Agregar comentario específico al producto
                });
            }

            // Limpiar el comentario después de agregar
            $("#txtObservacion").val('');
            // Actualizar el total de la venta cada vez que se agregue o actualice un producto
            actualizarListadoProductos();
        }

        // Actualizar el listado de productos seleccionados y el total
        function actualizarListadoProductos() {
            var totalPago = 0;
            $("#listaProductosSeleccionados").empty(); // Limpiar la lista visual

            productosSeleccionados.forEach(producto => {
                totalPago += producto.Subtotal;

                // Mostrar cada producto en la lista
                $("#listaProductosSeleccionados").append(
                    `<li>${producto.Nombre} - Cantidad: ${producto.Cantidad} - Precio: $${producto.Precio.toFixed(2)} - Subtotal: $${producto.Subtotal.toFixed(2)}<br>Comentario: ${producto.Comentario || 'Sin comentario'}</li>`
                );
            });

            // Actualizar el total acumulado en la interfaz
            $("#visibleTotalPago").val(totalPago.toFixed(2));
            $("#hiddenTotalPago").val(totalPago.toFixed(2));
        }
        // Función para limpiar solo la lista de productos seleccionados
        function limpiarProductos() {
            productosSeleccionados = []; // Vaciar el array de productos seleccionados
            actualizarListadoProductos(); // Actualizar la lista visual
            $("#visibleTotalPago").val(''); // Limpiar el total
            $("#hiddenTotalPago").val('');
        }

        // Función para guardar la venta
        function crearVenta() {

            // Construye el objeto venta incluyendo el Total_Pago calculado
            var venta = {
                Id_VentaViewModel: 0,  // O el valor adecuado
                oCliente: {
                    Id_Cliente: $("#selectCliente").val()
                },
                oLocalidad: {
                    Id_Localidad: $("#selectLocalidad").val()
                },
                Fecha_Venta: new Date().toISOString(),
                Total_Pago: parseFloat($("#hiddenTotalPago").val())
            };

            // Enviar la venta al backend
            $.ajax({
                url: '@Url.Action("InsertarVenta", "Home")',  // Cambia esto por tu URL real
                type: "POST",
                data: JSON.stringify(venta),
                contentType: "application/json",
                success: function (response) {
                    if (response.success) {
                        // Usa el nombre correcto del ID que retorna el backend
                        var ventaId = response.data ? response.data.Id_VentaViewModel : null; // Verifica que data e Id_VentaViewModel existan
                        if (ventaId) {
                            insertarDetallesVenta(ventaId);  // Llama a la función para insertar los detalles
                        } else {
                            alert("Error: No se pudo obtener el ID de la venta.");
                        }
                    } else {
                        alert("Error al crear la venta: " + response.message);
                    }
                },
                error: function (error) {
                    console.log("Error al guardar la venta:", error);
                }
            });
        }

        function insertarDetallesVenta(ventaId) {
            // Crear el objeto ProductoViewModel con los detalles de la venta (productos seleccionados)
            var detallesVenta = productosSeleccionados.map(function (producto) {
                return {
                    Id_DetalleVenta: 0,  // Incrementar Id_DetalleVenta en cada iteración
                    oVentaViewModel: {
                        Id_VentaViewModel: ventaId
                    },
                    oProducto: {
                        Id_Producto: producto.Id_Producto
                    },
                    Cantidad: producto.Cantidad,
                    Observacion: producto.Comentario,
                    PrecioUnitario: producto.Precio,
                    Subtotal: producto.Subtotal
                };
            });

            // Enviar los detalles de la venta al backend
            $.ajax({
                url: '@Url.Action("InsertarDetalleVenta", "Home")',  // Cambia esto por tu URL real
                type: "POST",
                data: JSON.stringify(detallesVenta),
                contentType: "application/json",
                success: function (response) {
                    if (response.success) {
                        alert("Venta creada con éxito.");
                        // Limpiar la lista de productos seleccionados
                        productosSeleccionados = [];
                        actualizarListadoProductos();
                    } else {
                        alert("Error al agregar los detalles de la venta: " + response.message);
                    }
                },
                error: function (error) {
                    console.log("Error al guardar los detalles de la venta:", error);
                }
            });
        }


    </script>
}
